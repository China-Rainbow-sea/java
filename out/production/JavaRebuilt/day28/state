反射：
疑问1: 通过直接 new 的方式或反射的方式都可以调用公共的结构，开发中
到底用哪个？
建议: 直接 new 的方式。
什么时候会使用，反射的方式，反射的特征：动态性
疑问: 反射机制与面向对象中的封装性是不是矛盾的？如何看待两个技术？
不矛盾。

关于 java.lang.Class 类的理解:
1.类的加载过程:
程序经过javac.exe 命令以后，会生成一个或多个字节码文件(.class) 接着我们使用
java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中，此过程就
称为类的加载。加载到内存中的类，我们就称为运行时类，此运行时类，就作为 Class 的一个实例。
换句话说: Class 的实例就对应着一个运行时类。

核心： "万事万物皆对象" 连 Class 运行时类都可以被看作是一个 “对象”：对象.xxx,File,URL,反射,前端,数据库操作。

哪些类型可以在 Class 对象 ？
1. class 类本身
外部类，成员(成员内部类，静态内部类)，局部内部类
2. interface 接口
3. [] 数组
4. enum 枚举
5. 注解
6. primitive type : 基本数据类型
7. void


当程序主动使用某个类是，如果该类还未加载到内存中，则系统会通过：如下三个步骤来对该类进行初始化:
1.类的加载(Load) : 将类的class文件读入内存，并为之创建一个java.lang.Class对象，此过程由类加载器完成。
2.类的链接(Link): 将类的二进制数据合并到JRE中
3.类的初始化(Initialize) JVM负责对类进行初始化。

加载:将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，
然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口(即引用地址)，所以
需要访问和使用类数据只能通过这个Class对象，这个加载的过程需要类加载器参与.

链接: 将Java类的二进制代码合并到JVM的运行状态之中的过程，
     > 验证: 确保加载的信息符合JVM规范，例如：以oafe开头，没有安全方面的问题.
     > 准备: 正式为类变量(static) 分配内存并设置变量默认初始值的阶段，这些内存都将在方法区中进行分配
     > 解析: 虚拟机常量尺内的符号引用(常量名)替换为直接引用(地址)的过程。

初始化:
    > 执行类构造器<clinit>()方法的过程，类的构造器<clinit>()方法是由编译期自动收集类中
      所有类变量的赋值动作和静态代码块中的语句合并产生的，(类构造器是构造类信息的，不是构造该类对象的构造器)
    > 当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。
    > 虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步.


